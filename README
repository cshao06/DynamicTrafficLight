https://sumo.dlr.de/docs/Simulation/Output/Lanearea_Detectors_(E2).html
https://sumo.dlr.de/docs/Tutorials/TraCIPedCrossing.html


算法设计
对于十字路口：
不考虑背向路口方向的车道，剩下的车道可以分为四个方向。考虑其中一个方向E（东）W（西）S（南）N（北），面朝一个红绿灯，红绿灯的状态可以表示为L（左）F（前）R（右）O（全关，行人状态）。

考虑不同方向间红绿灯的作用规律，以E入手，E-L状态下，E-F，E-R，W-R，W-L，W-O，S-R，S-O，N-F，N-R，N-O不互斥。E-F状态下， E-L，E-R，W-F，W-R，W-O，S-L，S-R，S-O，N-R，N-O不互斥。E-R状态下，与除E-O外所有状态均不互斥。E-O状态下，与WSN所有状态均不互斥，与E的其他状态，S-R，N-L互斥。
 
将E的结论推广到WSN。
 
考虑最小代价损失。我们仅以互斥行为入手。假定状态A与集合{A1，A2，… An}互斥，设状态An的代价为Pn，则A的损失代价为sum(Ai * Pi)。
 
下面定义Pi值的获取方法。所有状态初始P值均为0。设单时间片为ks，当对应路口有车辆/行人时，P值设为1，若未经轮转调度，则经过n个时间片后的损失值为r^n(r为固定参数)。
 
每一时间片周期初，选择损失最小的状态A，再从与A不互斥的状态集合中选择损失最小的状态B，再从与A，B不互斥的状态集合中选择损失最小的状态C……直到不互斥状态集合为空集。
 
为了解决损失状态相同的问题，我们定义了调度优先级衰减。当状态A被调度时，优先级为0，之后经过n个时间片的优先级为n，当损失代价相同时，优先调度优先级高的状态。
 
当A（E/W/S/N）-O触发时，考虑到行人的过路时长，锁定时间片调度至少30s。



实验设计

我们设计的算法是A
评估指标：
通过固定的车辆总数和行人总数所要花费的总时间
任意时间点路口固定范围内（i.e. 50米）内车辆和行人的等待总数，车辆为1，行人归一化为0.7
确定调度计划的时间，和做出反应时间之间的差距，阈值范围内

一、对比固定转换时间
A与红绿灯固定切换时间长短慢15s, 20s, 25s, 30s….
不同行人/车辆比重的情况下调度性能

二、对比不同的代价损失函数-----选optimal的函数
线性、对数、指数、nlogn
